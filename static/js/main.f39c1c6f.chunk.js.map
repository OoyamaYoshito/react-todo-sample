{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","handleAdd","bind","assertThisInitialized","handleDelete","e","preventDefault","target","text","value","push","title","setState","i","splice","react_default","a","createElement","className","class","App_Form","App_List","handleRemove","rel","href","type","src","Component","Form","onSubmit","id","name","for","List","map","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAEMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAETR,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,CAAAD,IACjBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IANHA,yEAUTa,GACRA,EAAEC,iBACyB,IAAvBD,EAAEE,OAAOC,KAAKC,QAClBd,KAAKI,MAAMC,MAAMU,KAAK,CAAEC,MAAON,EAAEE,OAAOC,KAAKC,QAC7Cd,KAAKiB,SAAS,CAAEZ,MAAOL,KAAKI,MAAMC,QAClCK,EAAEE,OAAOC,KAAKC,MAAQ,yCAIXI,GACXlB,KAAKI,MAAMC,MAAMc,OAAOD,EAAG,GAC3BlB,KAAKiB,SAAS,CAAEZ,MAAOL,KAAKI,MAAMC,yCAIlC,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACTJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,OACTJ,EAAAC,EAAAC,cAACG,EAAD,CAAMnB,UAAWN,KAAKM,YACtBc,EAAAC,EAAAC,cAACI,EAAD,CAAMrB,MAAOL,KAAKI,MAAMC,MAAOsB,aAAc3B,KAAKS,iBAGtDW,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMM,IAAI,aAAaC,KAAK,4DAC5BT,EAAAC,EAAAC,cAAA,QAAMM,IAAI,aAAaC,KAAK,qFAC5BT,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,kBAAkBC,IAAI,gDACnCX,EAAAC,EAAAC,cAAA,UAAQS,IAAI,4FAvCJC,aA8CZC,EAAO,SAACrC,GAAD,OACXwB,EAAAC,EAAAC,cAAA,OAAKE,MAAM,sBACTJ,EAAAC,EAAAC,cAAA,QAAMY,SAAUtC,EAAMU,UAAWkB,MAAM,eACrCJ,EAAAC,EAAAC,cAAA,SAAOa,GAAG,UAAUC,KAAK,OAAON,KAAK,OAAON,MAAM,iBAClDJ,EAAAC,EAAAC,cAAA,SAAOe,IAAI,UAAUb,MAAM,UAA3B,eAKAc,EAAO,SAAC1C,GAAD,OACXwB,EAAAC,EAAAC,cAAA,OAAKE,MAAM,uBACTJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,cACP5B,EAAMS,MAAMkC,IAAI,SAAClC,EAAOa,GACvB,OAAOE,EAAAC,EAAAC,cAAA,MAAIkB,IAAKtB,EAAGM,MAAM,gDAA+CJ,EAAAC,EAAAC,cAAA,WAAMjB,EAAMW,MAAZ,IAAmBI,EAAAC,EAAAC,cAAA,KAAGmB,QAAS,kBAAM7C,EAAM+B,aAAaT,IAAIM,MAAM,2BAA0BJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,kBAAT,kBAO7J7B,ICxDK+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f39c1c6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      todos: []\n    }\n    this.handleAdd = this.handleAdd.bind(this)\n    this.handleDelete = this.handleDelete.bind(this)\n  }\n\n  //タスク追加\n  handleAdd(e) {\n    e.preventDefault()\n    if (e.target.text.value == \"\") return;\n    this.state.todos.push({ title: e.target.text.value })\n    this.setState({ todos: this.state.todos })\n    e.target.text.value = ''\n  }\n\n  // タスク削除\n  handleDelete(i) {\n    this.state.todos.splice(i, 1)\n    this.setState({ todos: this.state.todos })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div class=\"container\">\n          <div class=\"row\">\n            <Form handleAdd={this.handleAdd} />\n            <List todos={this.state.todos} handleRemove={this.handleDelete} />\n          </div>\n        </div>\n        <div>\n          <link rel='stylesheet' href='https://fonts.googleapis.com/icon?family=Material+Icons' />\n          <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css' />\n          <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-2.1.1.min.js\"></script>\n          <script src='https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js'></script>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Form = (props) => (\n  <div class=\"input-field col s6\">\n    <form onSubmit={props.handleAdd} class=\"input-field\">\n      <input id=\"addtext\" name=\"text\" type=\"text\" class=\"autocomplete\" />\n      <label for=\"addtext\" class=\"active\">Task Add</label>\n    </form>\n  </div>\n);\n\nconst List = (props) => (\n  <div class=\"input-field col s12\">\n    <ul class=\"collection\">\n      {props.todos.map((todos, i) => {\n        return <li key={i} class=\"blue-grey-text text-darken-4 collection-item\"><div>{todos.title} <a onClick={() => props.handleRemove(i)} class=\"right secondary-content\"><i class=\"material-icons\">delete</i></a>\n        </div></li>\n      })}\n    </ul>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}